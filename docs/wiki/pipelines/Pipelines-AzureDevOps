# Azure DevOps Pipeline

The following instructions detail how to set up Azure DevOps Pipelines for a customer site deployment.

## Create Service Principal(s)

See [prerequisites](../deployments/Deployments-pre-deploy.md) to create the necessary Service Principal(s).

## Create Service Connection

First, you need to create an Azure Resource Manager service connection. To do so, execute the following steps:

1. First, you need to create an Azure DevOps Project. Instructions can be found [here](https://learn.microsoft.com/azure/devops/organizations/projects/create-project?view=azure-devops&tabs=preview-page).
1. In Azure DevOps, open the **Project settings**.
1. Now, select the **Service connections** page from the project settings page.
1. Choose **New service connection** and select **Azure Resource Manager**.

   [[/.media/ARMConnectionDevOps.png]]
   ![ARM Connection](../.media/ARMConnectionDevOps.png)

1. On the next page select **Service principal (manual)**.
1. Select the appropriate environment to which you would like to deploy the templates. Only the default option **Azure Cloud** is currently supported.
1. For the **Scope Level**, select **Subscription** and enter your `subscription Id` and `name`.
1. Enter the details of the service principal that we have generated in step 3. (**Service Principal ID** = **clientId**, **Service Principal Key** = **clientSecret**, **Tenant ID** = **tenantId**) and click on **Verify** to make sure that the connection works.
1. Enter a user-friendly **Connection name** to use when referring to this service connection. Take note of the name because this will be required in the parameter update process. TIP: Save the connection name with a name that delineates each environment. E.g. **"AzureVendingMachine-`DEV/TST/PRD`"**
1. Optionally, enter a **Description**.
1. Click on **Verify and save**.

   [[/.media/ConnectionDevOps.png]]
   ![Connection DevOps](../.media/ConnectionDevOps.png)

More information can be found [here](https://learn.microsoft.com/azure/devops/pipelines/library/connect-to-azure?view=azure-devops#create-an-azure-resource-manager-service-connection-with-an-existing-service-principal).

### Update Variable YAML Files

Update the YAML file for each environment with values appropriate to the deployment.

```yaml
---
variables:
  # Tenant and Subscription
  - name: tenantId
    value: a2ebc691-c318-4ec2-998a-a87c528378e0

  - name: subscriptionId
    value: 8c8ad7bb-298b-4fbc-b247-aee6bac5ce60

  # Deployment location in Azure
  - name: location
    value: australiaeast

  # Management Group for Deployment
  - name: rootMg
    value: mg-alz

  # Template File
  - name: templateFile
    value: './src/main.bicep'
```

> **Note:** You may need to also update `azure-pipelines.yml` with the names used for the Service Connection(s), environment and the `templateParameterFile`.

```yaml
- template: templates/deploy.yml
  parameters:
    environment: production # Update this with the correct environment.
    workingDirectory: 'artifact'
    serviceConnection: sp-alz-landingzones # Update this with the service connection name
    location: $(location)
    managementGroupId: $(rootMg)
    templateFile: $(templateFile)
    templateParameterFile: ./src/configuration/sub-sap-prd-01.parameters.bicepparam # Specify the correct parameter file
```

## Logical Implementation

If you need additional environments, follow these steps:

1. Make a copy of the `- template: templates/deploy.yml` code block in `azure-pipelines.yaml`.
2. Update the `environmentName` and `templateParameterFile` for each environment.

If creating multiple landing zones, such as one for Data and another for SAP, complete the following:

1. Make a copy of the `azure-pipelines.yaml` file (e.g., `azure-pipelines-SAP.yaml`) for each landing zone subscription vending.
2. Complete the steps above if your need multiple environments.

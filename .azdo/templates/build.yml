parameters:
  - name: workingDirectory
    type: string
  - name: artifactName
    type: string
  - name: bicepPath
    type: string
  - name: templateFile
    type: string
  - name: serviceConnection
    type: string
  - name: skipPSRule
    type: boolean

stages:
  - stage: build
    displayName: Test and Build
    jobs:
      - job: Linting
        displayName: 'Lint Testing'
        continueOnError: false

        steps:
          # Checkout Repo
          - checkout: self
            displayName: Check-Out Repository
            submodules: true
            lfs: false
            clean: true
            continueOnError: false
            enabled: true

          - script: |
              docker pull github/super-linter:latest
            displayName: Pull github/super-linter docker image

          - script: |
              docker run \
                -e RUN_LOCAL=true \
                -e VALIDATE_JSON=true \
                -e VALIDATE_MARKDOWN=true \
                -e VALIDATE_POWERSHELL=true \
                -e VALIDATE_YAML=true \
                -v $(System.DefaultWorkingDirectory):/tmp/lint \
                -v /path/to/local/codebase:/src/orchestration \
                github/super-linter
            displayName: super-linter validation

      - job: PSRule
        displayName: 'PSRule Validation'
        condition: ${{ ne(parameters.skipPSRule, true) }}
        dependsOn:
          - Linting
        continueOnError: false

        steps:
          # Checkout Repo
          - checkout: self
            displayName: Check-Out Repository
            submodules: true
            clean: true
            continueOnError: false
            enabled: true

          # Install PSRule.Rules.Azure from the PowerShell Gallery
          - task: ps-rule-install@2
            displayName: Install PSRule
            inputs:
              module: 'PSRule.Rules.Azure, PSRule.Rules.CAF' # Install PSRule.Rules.Azure from the PowerShell Gallery.
              latest: false # Only install the module if not already installed.
              prerelease: false # Install stable versions only.

          # Run analysis from JSON files using the `PSRule.Rules.Azure` module and custom rules from `.ps-rule/`.
          - task: ps-rule-assert@2
            displayName: Run PSRule against IaC
            continueOnError: true # This needs to be true as PSRule will if there are error in the Bicep which there is.
            inputs:
              inputType: inputPath
              inputPath: ${{ parameters.bicepPath }} # The path PSRule will look for files to validate.
              modules: 'PSRule.Rules.Azure,PSRule.Rules.CAF' # Analyze objects using the rules within the PSRule.Rules.Azure PowerShell module.
              baseline: Azure.Default # The name of a PSRule baseline to use.
              outputFormat: NUnit3 # Save results to an NUnit report.
              outputPath: reports/ps-rule-results.xml # Write NUnit report to 'reports/ps-rule-results.xml'.

          # Publish NUnit report as test results
          - task: PublishTestResults@2
            displayName: Publish PSRule Results
            inputs:
              testRunTitle: 'PSRule' # The title to use for the test run.
              testRunner: NUnit # Import report using the NUnit format.
              testResultsFiles: 'reports/ps-rule-results.xml' # The previously saved NUnit report.

      - job: Build
        displayName: 'Build'
        dependsOn:
          - Linting
          - PSRule

        steps:
          - task: AzureCLI@2
            displayName: Bicep Build
            continueOnError: true
            inputs:
              azureSubscription: ${{ parameters.serviceConnection }}
              scriptType: pscore
              scriptLocation: 'inlineScript'
              inlineScript: |
                az bicep build --file ${{ parameters.templateFile }} --stdout

          - task: CopyFiles@2
            displayName: Stage Artifacts
            inputs:
              TargetFolder: $(Build.ArtifactStagingDirectory)
              SourceFolder: ${{ parameters.workingDirectory }}
              Contents: |
                **/*
                !.vscode/**/*
                !.azdo/**/*
                !.local/**/*
                !docs/**/*
                !.editorconfig
                !.gitattributes
                !.gitignore
                !.prettierrc.json
                !README.md

          - task: PublishPipelineArtifact@1
            displayName: Publish Artifacts
            inputs:
              artifact: ${{ parameters.artifactName }}
              targetPath: $(Build.ArtifactStagingDirectory)
